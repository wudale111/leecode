'''
题目描述
有一棵二叉树，每个节点由一个大写字母标识(最多26个节点）。现有两组字母，分别表示前序遍历（父节点->左孩子->右孩子）和中序遍历（左孩子->父节点->右孩子）的结果，请你输出后序遍历（左孩子->右孩子->父节点）的结果。

输入
每个输入文件包含两串字母，各占一行。（每串只包含大写字母）
第一行字母表示前序遍历结果，第二行字母表示中序遍历结果。

输出
输出仅一行，表示后序遍历的结果，结尾换行。

样例
输入样例 1 复制

DBACEGF
ABCDEFG
输出样例 1

ACBFGED


解题思路：
1、先序遍历的第一个节点就是整棵二叉树的根节点，因此根据二叉树的根节点找到根节点在中序遍历中的位置。

2、中序遍历中的根节点的左边就是左子树，右边就是右子树，因此可以通过不断递归，来找到每一棵树。

3、得到二叉树后，通过层序遍历将结果添加到结果的子串当中。

4、层序遍历需要一个队列来记录遍历顺序。

'''
from typing import List
class TreeNode:
    def __init__(self,val=0,left=None,right=None):
        self.val=val
        self.left=left
        self.right=right
class Solution:
    def buildTree(self, preorder: List[str], inorder: List[str]) -> TreeNode:
        if not (preorder and inorder):
            return None
        root =TreeNode(preorder[0])
        mid_root=inorder.index(root.val)
        root.left=self.buildTree(preorder[1:mid_root+1],inorder[:mid_root])
        root.right=self.buildTree(preorder[mid_root+1:],inorder[mid_root+1:])
        return root
    
    #后续遍历
    # def lastorder(self,root:TreeNode):
    #     if root ==None:
    #         return
    #     self.lastorder(root.left)
    #     self.lastorder(root.right)
    #     print(root.val,end='')
    
    #前序遍历输出
    # def preorder(self,root:TreeNode):
    #     if not root:
    #         return
    #     print(root.val,end='')
    #     self.preorder(root.left)
    #     self.preorder(root.right)
    
    #中序遍历输出
    # def inorder(self,root:TreeNode):
    #     if not root:
    #         return
    #     self.inorder(root.left)
    #     print(root.val,end='')
    #     self.inorder(root.right)
    
    #层序遍历
    # def levelOrder(self, root):
    '''
    本题使用 DFS 同样能做。由于题目要求每一层的节点都是从左到右遍历，因此递归时也要先递归左子树、再递归右子树。
    DFS 做本题的主要问题是： DFS 不是按照层次遍历的。为了让递归的过程中同一层的节点放到同一个列表中，
    在递归时要记录每个节点的深度 level。递归到新节点要把该节点放入 level 对应列表的末尾。
    当遍历到一个新的深度 level，而最终结果 res 中还没有创建 level 对应的列表时，
    应该在 res 中新建一个列表用来保存该 level 的所有节点。
    '''
    #     res = []
    #     self.level(root, 0, res)
    #     return res
    # # def level(self, root, level, res):
    #     if not root: return
    #     if len(res) == level: res.append([])
    #     res[level].append(root.val)
    #     if root.left: self.level(root.left, level + 1, res)
    #     if root.right: self.level(root.right, level + 1, res)




A=Solution()
preorder = ['D','B','A','C','E','G','F']
inorder = ['A','B','C','D','E','F','G']
res=[]
# # print(A.buildTree(preorder,inorder).val)
# # A.lastorder(A.buildTree(preorder,inorder))
# A.preorder(A.buildTree(preorder,inorder))
print(A.levelOrder(A.buildTree(preorder,inorder)))



